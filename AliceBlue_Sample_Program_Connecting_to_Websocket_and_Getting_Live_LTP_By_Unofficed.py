''' # -*- coding: utf-8 -*-
"""Copy of AliceBlue Sample Program #1 - Connecting to Websocket and Getting Live LTP - By Unofficed

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8kqUqRZuIpBU3efXaMAL1CIqoEfa2RW
"""

#Google Collab Link - https://colab.research.google.com/drive/1vJmIXGTPe8Ckkx_psmO2Z5h4FXbp1Z4H?usp=sharing
#Install The Python Wrapper

#!pip install alice_blue

#Importing AliceBlue Library
from alice_blue import *

#Only Replace it with your credentails
#Follow https://unofficed.com/how-to-activate-the-api-in-alice-blue-for-automated-trading/ for generating api_ID and api_Secret 

#Only Replace it with your credentails
username    = "" 
password    = "*" 
twoFA       = ""
app_id      = ""
#api_secret  = ""
api_secret = ''

#Generating Session ID
session_id = AliceBlue.login_and_get_sessionID(username=username,password=password,twoFA=twoFA,app_id=app_id,api_secret=api_secret)

#Generate an Alice object using the session_id
alice = AliceBlue(username = username, session_id = session_id, master_contracts_to_download=['NSE', 'BSE','NFO','MCX'])

print(alice.get_balance()) # get balance / margin limits

print(alice.get_scrip_info(alice.get_instrument_by_symbol("NSE", "INFY-EQ")))

print(alice.get_scrip_info(alice.get_instrument_by_symbol("NFO", "BANKNIFTY23MARFUT")))

#Getting Instrument of Crude Oil
crude_oil_symbol = alice.get_instrument_by_symbol('MCX', 'CRUDEOIL23MARFUT')
crude_oil_symbol

#Starting the Websocket and Subscribing to a Scrip
tick = 0
def event_handler_quote_update(message):
    global tick
    tick=message

alice.start_websocket(subscribe_callback=event_handler_quote_update)

#This subscribe function takes the first variable type as Instrument. We had this from last block. Second variable is selection between Tick Data or Depth Data.
alice.subscribe(crude_oil_symbol, LiveFeedType.TICK_DATA)

alice.get_all_subscriptions()

#Websocket is connected. Now Lets get the LTP
from time import sleep
while True:
  try:  
    print(tick['instrument'][2]+" : "+str(tick['ltp']))
  except TypeError: #Tick data comes when there is no trade. We are checking for tick data each 5 seconds. If there is no trade in between those 5 seconds, it will reply 0. That will raise an error. We are ignoring it.
    pass
  sleep(5) '''

#!C:\Users\WinWinTrader\AppData\Local\Programs\Python\Python38\python.exe
#Bull Call Spread Options strategy
#https://api.kite.trade/instruments -- download instruments using this.

import logging
from kiteconnect import KiteConnect
import csv
import time
import math
from datetime import datetime, timedelta
#import acctkn
from kiteconnect import KiteConnect
import schedule
from kite_trade import *
import helper


config = helper.read_config()


enctoken=config['KiteSettings']['enctoken']


log_filename_path =config['Logger']['LogFilePath']
log_file_Name=config['Logger']['LogFileName']

#att=acctkn.att()
#ap=acctkn.atp()


def get_kite():
    logging.basicConfig(filename=log_filename_path+'//'+log_file_Name,format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=20)
    kiteObj = KiteApp(enctoken=enctoken)
    return kiteObj


kite = get_kite()
print("The access token ->"+str(kite.session))

orders = []
WeeklyExpiry = '2023-08-17'
Specify_the_Entry_TIME_HHMM = '1757'
Quantity = 15

def def_place_mkt_order_buy(symbl):
 print("Im inside def_place_mkt_order_buy for: ",symbl)
 try:
    order_id = kite.place_order(tradingsymbol=symbl,variety=kite.VARIETY_REGULAR,
                                 exchange=kite.EXCHANGE_NFO,
                                 transaction_type=kite.TRANSACTION_TYPE_BUY,
                                 quantity=Quantity,
                                 order_type=kite.ORDER_TYPE_MARKET,
                                 product=kite.PRODUCT_MIS,price=None, validity=None, 
                                 disclosed_quantity=None, trigger_price=None, 
                                 squareoff=None, stoploss=None, trailing_stoploss=None, tag=None)
 
    print("Order placed. ID is:", order_id)
    return order_id
 except Exception as e:
    print("exception occured:" + str(e))
def def_place_mkt_order_sell(symbl):
 print("Im inside def_place_mkt_order_sell for: ",symbl)
 
 try:
    order_id = kite.place_order(tradingsymbol=symbl,variety=kite.VARIETY_REGULAR,
                                 exchange=kite.EXCHANGE_NFO,
                                 transaction_type=kite.TRANSACTION_TYPE_SELL,
                                 quantity=Quantity,
                                 order_type=kite.ORDER_TYPE_MARKET,
                                 product=kite.PRODUCT_MIS,price=None, validity=None, 
                                 disclosed_quantity=None, trigger_price=None, 
                                 squareoff=None, stoploss=None, trailing_stoploss=None, tag=None)
 
    print("Order placed. ID is:", order_id)
    return order_id
 except Exception as e:
    print("exception occured:" + str(e))
def ORDER_mkt_order_buy():
    tradingsymbol='NIFTY BANK'
    ohlc=kite.ltp('NSE:{}'.format(tradingsymbol))
    # WORKING print('printing OHLC:',ohlc)
    # WORKING ohl=ohlc['NSE:{}'.format(tradingsymbol)]['ohlc']
    # WORKING print('printing OHL:',ohl)
    # WORKING openn=ohl['open']
    # WORKING print('printing openn:',openn)
    ltp = ohlc['NSE:{}'.format(tradingsymbol)]['last_price']  
    #ltp = ohlc['last_price']  
    print('\n BANKNIFTY SPOT Price:',ltp)
    #val = 31712.5
    #print(val)
    val = ltp
    val2 = math.fmod(val, 100)
    #print('val2', val2)
    x = val - val2
    abs_val = "{:.0f}".format(x) # to remove .0 string.
    print('\n Identified CE ATM:',"{:.0f}".format(x))
    CE_PRICE = "{}".format("{:.0f}".format(x + 0))
    CE_PRICE_2 = "{}".format("{:.0f}".format(x + 300))
    print('\n Identified CE OTM(ATM+300):',CE_PRICE_2)
    
    with open('instruments.csv', 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        next(csv_reader)

        for column in csv_reader:
            if column[6] == CE_PRICE and column[3] =='BANKNIFTY' and column[5] == WeeklyExpiry and column[9] == 'CE' :

                    #place CALL order
                    ord_id = 100
                    ord_id = def_place_mkt_order_buy(column[2])
                    orders.append(ord_id)
                    print('\n CALL contract BUY  Executed: ',column[2])

                    with open('instruments.csv', 'r') as csv_file:
                        csv_reader = csv.reader(csv_file)
                        next(csv_reader)
                    
                        for column in csv_reader:
                            if column[6] == CE_PRICE_2 and column[3] =='BANKNIFTY' and column[5] == WeeklyExpiry and column[9] == 'CE' :
                                    time.sleep(5)
                                    #place CALL order
                                    ord_id = 200
                                    ord_id = def_place_mkt_order_sell(column[2])
                                    orders.append(ord_id)
                                    print('\n CALL contract SELL executed: ',column[2])

    print('\n The Executed order IDs are : ', orders)

####################-------------------------------------------------------MAIN PROGRAM--------------------------------------------------

def Bull_Call_Spread_OptionStrategy():

  print("\n Current time: ",datetime.now())
  curr_dt = time.strftime("%Y%m%d", time.localtime())

  set_order_placement_time_first = curr_dt + Specify_the_Entry_TIME_HHMM
  print("\n Order placement TIME configured as : ",set_order_placement_time_first)
  
  while True:

      curr_tm_chk = time.strftime("%Y%m%d%H%M", time.localtime())
      if ( set_order_placement_time_first == curr_tm_chk or curr_tm_chk > set_order_placement_time_first ):
          print("\n The order placement started")
          ORDER_mkt_order_buy()
          break
      else:
          print("\n Going to wait 10 more seconds till: ",set_order_placement_time_first,' & CURRENT TIME IS',datetime.now())
          time.sleep(10)

Bull_Call_Spread_OptionStrategy()

####################-------------------------------------------------------MAIN PROGRAM END--------------------------------------------------